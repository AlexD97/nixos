// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.

input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            layout "de"
	    variant "neo"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }

        // You can set the keyboard repeat parameters. The defaults match wlroots and sway.
        // Delay is in milliseconds before the repeat starts. Rate is in characters per second.
        // repeat-delay 600
        // repeat-rate 25

        // Niri can remember the keyboard layout globally (the default) or per-window.
        // - "global" - layout change is global for all windows.
        // - "window" - layout is tracked for each window individually.
        // track-layout "global"
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // tap-button-map "left-middle-right"
    }

    mouse {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    tablet {
        // Set the name of the output (see below) which the tablet will map to.
        // If this is unset or the output doesn't exist, the tablet maps to one of the
        // existing outputs.
        map-to-output "eDP-1"
    }

    // By default, niri will take over the power button to make it sleep
    // instead of power off.
    // Uncomment this if you would like to configure the power button elsewhere
    // (i.e. logind.conf).
    // disable-power-key-handling
}

// You can configure outputs by their name, which you can find with wayland-info(1).
// The built-in laptop monitor is usually called "eDP-1".
// Remember to uncommend the node by removing "/-"!
output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 1.0

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // All valid modes are listed in niri's debug output when an output is connected.
    mode "2256x1504"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // It the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=0 y=0
}

output "DP-5" {
    scale 1.0
    mode "1680x1050"
    position x=0 y=-1050
}

output "DP-6" {
    scale 1.0
    mode "1080x1920"
    position x=-3000 y=-1920
    transform "90"
}

output "DP-7" {
    scale 1.0
    mode "1920x1200"
    position x=-1920 y=-1200
}

layout {
    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Color of the ring on the active monitor: red, green, blue, alpha.
        active-color 127 200 255 255

        active-gradient from="#f98b06" to="#0674f9" angle=45

        // Color of the ring on inactive monitors: red, green, blue, alpha.
        inactive-color 80 80 80 255
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        off

        width 4
        active-color 255 200 127 255
        inactive-color 80 80 80 255
    }

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.333
        proportion 0.5
        proportion 0.667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // Set gaps around windows in logical pixels.
    gaps 16

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    // - "always", the focused column will always be centered.
    center-focused-column "never"
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// spawn-at-startup "alacritty" "-e" "fish"
// "hash" "dbus-update-activation-environment" "2>/dev/null" "&&" 
// // spawn-at-startup "systemctl" "--user" "import-environment" "DISPLAY" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP=niri" "QT_QPA_PLATFORM=wayland-egl"
// spawn-at-startup "systemctl" "--user" "import-environment" "DISPLAY" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP=niri" "QT_QPA_PLATFORM=wayland-egl"
// spawn-at-startup "dbus-update-activation-environment" "--systemd" "DISPLAY" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP=niri" "QT_QPA_PLATFORM=wayland-egl"
// // spawn-at-startup "systemctl" "--user" "restart" "xdg-desktop-portal-wlr.service"
// // // spawn-at-startup "systemctl" "--user" "restart" "xdg-desktop-portal-gtk.service"
// // spawn-at-startup "systemctl" "--user" "mask" "xdg-desktop-portal-wlr.service"
// spawn-at-startup "systemctl" "--user" "restart" "syncthingtray.service"
// spawn-at-startup "systemctl" "--user" "--wait" "restart" "waybar.service"
// spawn-at-startup "waybar"
// spawn-at-startup "sleep" "5"
// spawn-at-startup "systemctl" "--user" "restart" "syncthingtray.service"
spawn-at-startup "wl-paste" "--watch" "cliphist" "store"
// // spawn-at-startup "waybar"

// You can override environment variables for processes spawned by niri.
environment {
    // Set a variable like this:
    // QT_QPA_PLATFORM "wayland"

    // Remove a variable by using null as the value:
    // DISPLAY null
}

cursor {
    // Change the theme and size of the cursor as well as set the
    // `XCURSOR_THEME` and `XCURSOR_SIZE` env variables.
    xcursor-theme "Adwaita"
    xcursor-size 24
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Bilder/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Settings for the "Important Hotkeys" overlay.
hotkey-overlay {
    // Uncomment this line if you don't want to see the hotkey help at niri startup.
    // skip-at-startup
}

// Animation settings.
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0

    // You can configure all individual animations.
    // Available settings are the same for all of them:
    // - off disables the animation.
    // - duration-ms sets the duration of the animation in milliseconds.
    // - curve sets the easing curve. Currently, available curves
    //   are "ease-out-cubic" and "ease-out-expo".

    // Animation when switching workspaces up and down,
    // including after the touchpad gesture.
    workspace-switch {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
    }

    // All horizontal camera view movement:
    // - When a window off-screen is focused and the camera scrolls to it.
    // - When a new window appears off-screen and the camera scrolls to it.
    // - When a window resizes bigger and the camera scrolls to show it in full.
    // - And so on.
    horizontal-view-movement {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
    }

    // Window opening animation. Note that this one has different defaults.
    window-open {
        // off
        // duration-ms 150
        // curve "ease-out-expo"
    }

    // Config parse error and new default config creation notification
    // open/close animation.
    config-notification-open-close {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
    }
}

// Window rules let you adjust behavior for individual windows.
// They are processed in order of appearance in this file.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    // Match directives control which windows this rule will apply to.
    // You can match by app-id and by title.
    // The window must match all properties of the match directive.
    //match app-id="org.myapp.MyApp" title="My Cool App"
    //match app-id="org.gnome.Evince"
    match app-id="evince"

    // There can be multiple match directives. A window must match any one
    // of the rule's match directives.
    //
    // If there are no match directives, any window will match the rule.
    // match title="Second App"

    // You can also add exclude directives which have the same properties.
    // If a window matches any exclude directive, it won't match this rule.
    //
    // Both app-id and title are regular expressions.
    // Raw KDL strings are helpful here.
    //exclude app-id=r#"\.unwanted\."#

    // Here are the properties that you can set on a window rule.
    // You can override the default column width.
    // default-column-width { proportion 1.0; }

    open-maximized true;

    // You can set the output that this window will initially open on.
    // If such an output does not exist, it will open on the currently
    // focused output as usual.
    open-on-output "DP-6"
}

// Here's a useful example. Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
/-window-rule {
    // This regular expression is intentially made as specific as possile,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    // The regular expression can match anywhere in the string.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return { spawn "alacritty"; }
    Mod+R { spawn "rofi" "-show" "run"; }
    Mod+T { spawn "emacsclient" "-c" "-a" "'emacs'"; }
    Mod+B { spawn "firefox"; }
    Mod+Alt+L { spawn "swaylock"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    XF86AudioRaiseVolume { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
    XF86AudioLowerVolume { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
    XF86AudioMute { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }

    XF86MonBrightnessUp { spawn "brightnessctl" "set" "+5%"; }
    XF86MonBrightnessDown { spawn "brightnessctl" "set" "5%-"; }

    Mod+Alt+C { spawn "bash" "-c" "cliphist list | rofi -dmenu | cliphist decode | wl-copy"; }

    Mod+Q { close-window; }

    Mod+I     { focus-column-left; }
    Mod+A     { focus-window-down; }
    Mod+L     { focus-window-up; }
    Mod+E     { focus-column-right; }
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }

    Mod+Ctrl+I     { move-column-left; }
    Mod+Ctrl+A     { move-window-down; }
    Mod+Ctrl+L     { move-window-up; }
    Mod+Ctrl+E     { move-column-right; }
    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+I     { focus-monitor-left; }
    Mod+Shift+A     { focus-monitor-down; }
    Mod+Shift+L     { focus-monitor-up; }
    Mod+Shift+E     { focus-monitor-right; }
    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }

    Mod+Shift+Ctrl+I     { move-window-to-monitor-left; }
    Mod+Shift+Ctrl+A     { move-window-to-monitor-down; }
    Mod+Shift+Ctrl+L     { move-window-to-monitor-up; }
    Mod+Shift+Ctrl+E     { move-window-to-monitor-right; }
    Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-window-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-window-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-window-to-monitor-right; }

    Mod+W              { focus-workspace-down; }
    Mod+X              { focus-workspace-up; }
    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+Ctrl+W         { move-window-to-workspace-down; }
    Mod+Ctrl+X         { move-window-to-workspace-up; }
    Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-window-to-workspace-up; }

    Mod+Shift+W         { move-workspace-down; }
    Mod+Shift+X         { move-workspace-up; }
    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }

    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-window-to-workspace 1; }
    Mod+Ctrl+2 { move-window-to-workspace 2; }
    Mod+Ctrl+3 { move-window-to-workspace 3; }
    Mod+Ctrl+4 { move-window-to-workspace 4; }
    Mod+Ctrl+5 { move-window-to-workspace 5; }
    Mod+Ctrl+6 { move-window-to-workspace 6; }
    Mod+Ctrl+7 { move-window-to-workspace 7; }
    Mod+Ctrl+8 { move-window-to-workspace 8; }
    Mod+Ctrl+9 { move-window-to-workspace 9; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }
    Mod+Shift+Comma { consume-or-expel-window-left; }
    Mod+Shift+Period { consume-or-expel-window-right; }

    Mod+H { switch-preset-column-width; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+J { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+V { set-column-width "-10%"; }
    Mod+C { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+V { set-window-height "-10%"; }
    Mod+Shift+C { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    Mod+Shift+E { quit; }
    Mod+Shift+P { power-off-monitors; }

    Mod+Shift+Ctrl+T { toggle-debug-tint; }
}

// Settings for debugging. Not meant for normal use.
// These can change or stop working at any point with little notice.
debug {
    // Make niri take over its DBus services even if it's not running as a session.
    // Useful for testing screen recording changes without having to relogin.
    // The main niri instance will *not* currently take back the services; so you will
    // need to relogin in the end.
    // dbus-interfaces-in-non-session-instances

    // Wait until every frame is done rendering before handing it over to DRM.
    // wait-for-frame-completion-before-queueing

    // Enable direct scanout into overlay planes.
    // May cause frame drops during some animations on some hardware.
    // enable-overlay-planes

    // Disable the use of the cursor plane.
    // The cursor will be rendered together with the rest of the frame.
    // disable-cursor-plane

    // Slow down animations by this factor.
    // animation-slowdown 3.0

    // Override the DRM device that niri will use for all rendering.
    // render-drm-device "/dev/dri/renderD129"
}